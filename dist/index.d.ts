// Generated by dts-bundle v0.7.3

export default class ClusterWS {
    events: EventEmitter;
    options: Options;
    websocket: WebSocket;
    channels: CustomObject;
    useBinary: boolean;
    missedPing: number;
    pingInterval: any;
    constructor(configurations: Configurations);
    on(event: 'error', listener: (err: any) => void): void;
    on(event: 'connect', listener: () => void): void;
    on(event: 'disconnect', listener: (code?: number, reason?: string) => void): void;
    on(event: string, listener: Listener): void;
    send(event: string, data: any, type?: string): void;
    disconnect(code?: number, reason?: any): void;
    subscribe(channelName: string): Channel;
    getChannelByName(channelName: string): Channel;
    getState(): number;
}

export class Channel {
    name: string;
    constructor(socket: ClusterWS, name: string);
    watch(listener: Listener): Channel;
    publish(data: any): Channel;
    unsubscribe(): void;
    onMessage(data: any): void;
    subscribe(): void;
}

export class EventEmitter {
    on(event: string, listener: Listener): void;
    emit(event: string, ...args: any[]): void;
    removeAllEvents(): void;
}

export function buffer(str: string): ByteString;
export function decode(socket: ClusterWS, message: any): any;
export function encode(event: string, data: any, type: string): string;

export function logError<T>(data: T): any;

export type Listener = (...args: any[]) => void;
export interface CustomObject {
    [propName: string]: any;
}
export interface Options {
    url: string;
    autoReconnect: boolean;
    reconnectionAttempts: number;
    reconnectionIntervalMin: number;
    reconnectionIntervalMax: number;
}
export interface Configurations {
    url: string;
    autoReconnect?: boolean;
    reconnectionAttempts?: number;
    reconnectionIntervalMin?: number;
    reconnectionIntervalMax?: number;
}

