// Generated by dts-bundle v0.7.3

export class ClusterWS {
    websocket: WebSocket;
    options: IOptions;
    pingInterval: any;
    channels: any;
    events: EventEmitter;
    missedPing: number;
    useBinary: boolean;
    constructor(configurations: IPassedOptions);
    create(): void;
    on(event: string, listener: any): void;
    send(event: string, data: any, type?: string): void;
    disconnect(code?: number, msg?: any): void;
    getState(): any;
    subscribe(channel: string): void;
    getChannelByName(channelName: string): Channel;
}

export class Channel {
    channel: string;
    socket: ClusterWS;
    constructor(channel: string, socket: ClusterWS);
    watch(listener: any): Channel;
    publish(data: any): Channel;
    unsubscribe(): void;
    onMessage(data: any): void;
    subscribe(): void;
}

export function socketEncodeMessages(event: string, data: any, type: string): any;
export function socketDecodeMessages(socket: ClusterWS, message: any): any;

export class Reconnection {
    socket: ClusterWS;
    inReconnectionState: boolean;
    constructor(socket: ClusterWS);
    isConnected(): void;
    reconnect(): void;
}

export class EventEmitter {
    on(event: string, listener: any): void;
    emit(event: string, ...args: any[]): void;
    removeAllEvents(): void;
}

export interface IOptions {
    url: string;
    port: number;
    autoReconnect: boolean;
    reconnectionIntervalMin: number;
    reconnectionIntervalMax: number;
    reconnectionAttempts: number;
}
export interface IPassedOptions {
    url: string;
    port: number;
    autoReconnect?: boolean;
    reconnectionIntervalMin?: number;
    reconnectionIntervalMax?: number;
    reconnectionAttempts?: number;
}
export function logError(data: any): any;

